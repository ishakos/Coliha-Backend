◘ NODE JS ◘ 
  - It is an environnement (runtime) to run js outside the browser
    • actually u can run other languages, but u need to download some stuff 1st from their original website (python.org++ for example)
  - every browser has an engine, which compile our code to machine code (chrome uses v8, and node got created from v8 + libuv) 
    • libuv is some c library that provides support in the js runtime
  - we use node js to create our own server (backend)
    • data, securtiy, ...

◘ INSIDE THE NODE ENVIRONNEMENT ◘ 
  - all what is mentionned below called asynchronus I/O (input/output)
  - inside the node environnement there this processes: 
    1- js engine (code to machine code bl fl.open())
    2- node api (globals) that allows us to talk to file system or make http request or look up paths or crypto ... ect, 
    3- node.js bindings that pass tasks to libuv (written in c+++)
    4- libuv (c library that talks to the operating system)

◘ BACKEND & FRONTEND
  - FE send request to BE (data), then BE response to FE (html files)
    • the data can be html files, css, js, json, xml, txt, ...
    • this process uses the language http/https (hyper text transfer protocol)
    • the last s in https = secure

◘ SYNCHRONUS & ASYNCHRONUS & CALLBACK & NON-BLOCKING FUNCTION 
  • synch = step by step 
  • asynch = mutiple tasks at one time (parrallel kichghol)
  • callback function: when youre done doing all of this code, come call me back later and run my code
  • non-blocking function: runs asynchronusly, unlike blocking function that runs synchronusly, basicly l functions li yedo we9t twil lzm ykono non-blocking, kima l functions li yestenaw inputs and outputs from the devices bah node yeb9a executing other code

◘ IS JS ASYNCH OR SYNCH ◘
  ○ js is single-thread language, unlike java or c++ (multi)
  ○ pc's with more processor cores are more powerful, each core f processeur is dedicated to run one thread, which means faster and smoother program execution
  ○ thread1 & thread2 are independant from each other, malgré yetexecutaw en meme temps, w li ykml lwl depends on code kifah rak mktob (wch kayan f parametre te3 thread function, wla chkon thread li tktbt lwla fl code) (btw da5el threads kayen pile te3 algo)
  ○ threads help us run code smoothly, running multiple functions in the same time m3a the rest of the code BUT things are not easy just like that, kayn mechanism needs to be used bah tedmen using threads kima mutual execlusivity & locks (swaleh te3 SE), and doing this effectively can cause complex problems called deadlocks (when 2 threads are stuck waiting for an action li mahich ge3 7tesra) that all programmers try their best to avoid it and they struggle avoiding it
  ○ ANSWER1: thats why li 5dem js 5demha single-thread language(synchronusly), w hdok l functions li yesraw asynchronusly kima setTimeOut hdok mchi js but actually from the window object

◘ IS NODE IS A MULTITHREADED ◘ 
  ○ the thing that made node to be so successful is the ability to run js code asynchronusly
  ○ f node kayen one main thread runs the v8  engine (js code, also including the node api's) bah yetmacha m3a logic of single-thread language te3 js but node run code asynchronusly, how? thanks to event loop li jaya f libuv, this event loop is code in libuv that runs asynch functions of js or any asynch functions in general
    • the event loop is written in c with a logic similar to this: 
      • while (!shouldExit) { process(); }
      • node will auto enter this loop when u start running the code, and the loop will keep looping 7ata y5las l code f node
  ○ libuv handls 2 mains things of asynchronus I/O: file system & network, some tasks involve the network, par example talking to servers over the interet are done directly in the operating system, while other tasks like reading a file are done in the thread pool, which is a group of threads, contains the main thread that executes v8 w event loops, w kayen 4 other threads that are waiting f kach task ydiroh, each of them handle one task by the time, w 3dna limited sets of threads fl pool hdi, ida kano m3mrin ge3 we simply nestenaw 7ata kech task ykemal w tefregh kech thread
  ○ for file system operations, libuv send the work to one of the threads w tdir task te3ha independantly m threads lo5rin ofc w ki tkml the event loop will get notified of the result and execute the callback, but kayen only few operation use the thread pool psq kima 9olna multi-thread operation are complex, and node try the best to avoid it, this is why libuv use the operating system directly (specifacly the curnal jay f OS), kichghol hada l curnal yna9as tasks bzef 3la l thread pool madam ydir the work better
  ○ ki ykmlo bzef callback functions n7otohom f callback queue FIFO but event loop has 4 different callback queue FIFO, depends on the main event loop phases, kayen phase of: timers, I/O callbacks, setImmediate, Close callbacks (l order is important)
    • example: setTimeOut(callbackfct, 1000) troh l timers 
    • example2: callback for a file system operations troh l I/O callbacks
    • l event loop yverifi wch m type of callbacks kayen bl order w ki ysib yferagh la file hdik w yroh li moraha:
    1- timers: kayen 2 types: setTimeOut, setInterval
    2- I/O callbacks: anything that dosent fit the other phases
    3- setImmediate: runs immediate after any i/o operation and before another cycle of event loop starts
    4- close callback: close file or close a network connection
    5- l event loop re-loop ge3 wch derna l fo9
  ○ ANSWER2: not really, but kind of, specifacly howa single-thread but provides some multithreading api's
  ○ php w python backend uses an additional webserver called apache psq bzef users requests yjohom tji pression kbira 3lihom, unlike node.js, system te3o te3 event loops gives me kind of an adventage or dealing of requests & threads 
  ○ what is node best at? hes good at serving data for i/o heavy apps, exapmle streaming movies in netflix, is mainly i/o sending video files from database throught a server like node into a user web browser or app

----------------------------------------------------------------------

◘ HOW DO WE GET NOD EVALUATE OUR CODE ◘
  1- REPL (read eval print loop): tbh is for playing around
    • its like console te3 browser, tsayi fiha bsh not the thing we need
    • you just type node and press enter f terminal then do ur thing
    • example: const name = "ishak" + enter + name 
    • ctrl + c = stop REPL
  2- CLI: thats what we need

◘ CODE EXECUTION ◘
  -go to the folder (cd cd cd ...) then type node app.js (ytafficha f cmd)
  -or u can just run code f terminal te3 vscode

----------------------------------------------------------------------

◘ GLOBALS ◘ 
  - window objects dont exist here (fetch, querySelector, ...)
    • those things only exists in browser, psq browsers dayrin window object 
    (not part of js) bah n5dmo bih, node js lala, node js dayer globals for us
  - but you can use other things like setInterval, setTimeout, ...
  1-__dirname: path to current directory
  2-__filename: file name
  3-require:s function to use modules (commonJS)
  4-module: info about current module (file)
  5-process: info about env where the program is being executed (useful)
    • knowing the current env of your program helps make decision in ur code
    6-and many more...

◘ PROCESS GLOBAL ◘ 
  - 1st of all kyn bzef globals 7ws 3lihom f site officiel te3 node 
  - process.argv = array of one elements
    • IN TERMINAL:  node file.js tahine ==> 
      • process.args[0] = 'path node.exe'  
      • process.args[1] = 'file path'  
      • process.args[2] = 'tahine'  

----------------------------------------------------------------------

◘ THE OBSERVER PATTERN ◘
  - subject (uefa) makes events (ucl and uel or many more), observers (us football fans) are subscribed to this subject and gets notified about all the updates of what is the subject doing
    • this patterns is useful and to imagine on button hover and click events, and for our case DATABASE can be represented this way
  - in node the way we get notified by these events is by callback functions 

◘ EVENT EMIITER ◘
  - const EventEmitter = require("events");
    const uefa = new EventEmitter();

    //subscribe to uefa for observer 1 (milan fan)
    uefa.on("milan wins ucl", () => {
      console.log("Sempre Milan!");
    });

    //subscribe to uefa for observer 2 (inter fan)
    uefa.on("milan wins, (result) => {
      if (result === "ucl") console.log("Lucky team!");
    });

    uefa.emit("milan wins ucl"); //yaffichi both
    uefa.emit("milan dont wins ucl"); //mayaffichich
    uefa.emit("milan wins", "ucl"); //yaffichi both

  - affichage: both logs will printed
  - note: Process global is an instance of the EventEmitter
    • process.on("exit", (code) => {
      console.log('Process exit event with code: ', code); //0 mean no err
    })
  - note2: require() hiya fct tjibk kech feature mn bara (machi m js) t5dem biha fl code te3ek
  
----------------------------------------------------------------------

◘ NODE MODULES ◘ 
  - its like a box fih code to do one job w tdirlo label (http.js for example), and we combine modules with other modules to create more complex strucures that makes our program
  - benefits: organize code, reuse existing code, 
  - tenjem t5dem b already made modules by dev's (http for example) or you can create your own
  ◘ HTTP ◘ 
  - const http = require("http");

    const req = http.request("http://www.google.com", (res) => {
      res.on("data", (chunk) => {
        console.log(`Data chunk: ${chunk}`);
      });
      res.on("end", () => {
        console.log("no more data");
      });
    });

    req.end();
  - notes:
    • tenjem tdir https
    • tenjem tdir: const {request} = require("http");
                   const req = request(bla bla)
    • tenjem tdir: const {get} = require("http");
                   get (bla bla)
                   w hna req.end() ne7iha
  ◘ CUSTOM MODULE ◘ 
   - read custom module folder
    • search 'node caches modules' or watch part4 lesson38
  ◘ INDEX.JS (NOT RECOMMENDED THO) ◘
    - this is a special case f node, it allows you to treat a folder like a module, par example kyn folder fih bzef modules hab timportihom besah line by line tenjem tjik bzef
    -in index.js (jay da5el l folder also):
      module.exports = {
        request: require("./request.js")
        response: require("./response.js")
      }
    - in https.js:
      const internals = require ("./folder");

 ◘ NODE PACKAGE MANAGER (NPM) ◘    
  - npmjs.com, plenty of packages by other devs that u can use
    • par example rani 7wst f site 3la 3fsa asmha axios, w ndir la commande f terminal bah n'instaliha 'npm i axios'
    • fl package.json te3 l folder te3i, f scripts{} tenjem tzid: "start": "node https.js", bah f terminal tdir direct npm run start
  - module is a file, package is a collection of modules
  - keys meaning:
    • i = install, 
    • -y = yes for every question ra7 ys9sik,
    • -g = installing globaly instead of localy
    • init = create our package.json
  - random infos: 
    • node_modules is so heavy
    • in package.json "version" 1.0.0 != 1.1.0 != 1.2.0   
  - read packagePractise folder
  - kayen nodemon package li ychbh l live server, ki tbdl 3fsa w tdir save yetexecuta kolch w7do (helpful)
    • npm install nodemon
  ◘ HACKERS & SECURTIY ◘ 
    - npm audit is a command to see if there any security issues in our packages
    - npm audit fix (to fix the issue)
      • if there is no update, mb switch to another more secured library

----------------------------------------------------------------------

◘ SPACE PROJECTS ◘ 
  - csv file = data file
  - node mayfhmch csv files, that each data seperated by a comma w syntax w swaleh.. this why npm csv-parse package saves us who converts data into array and objects
  - it is a good idea to stream large data sets
  - 1st of all, to use a package from npm we need to initialse our project 'npm init -y'

----------------------------------------------------------------------

◘ WEB SERVER (OR BACKEND OR HTTP SERVER) ◘ 
  - rak f fb, 1st ur browser calls dns server (domain name system)  accross the internet, the servers look up for the adress of the url (fb) w ymedholna in ip (internet protocol) form, chghol rak t7aws 3la asem mosque f google map w ymdlk ladress
  - moraha hdak l ip we use to communicate with the http server (with the http/https language li hderna 3lih mn9bl) then he sends us back json, xml, html, txt, ... files
  - example: browser sends fb.com to dns server, who response with an ip address 31.13.70.36, w nzidolha :80 m3a tali ze3ma type of server (app or website), and we send 31.13.70.36:80 in http language to http server li ymdlna l files tew3na 
  ◘ HTTP LANGUAGE:  
    - METHOD PATH BODY HEADERS (optional)
      • example: POST /messages {text"hello", photo:"./"} Host:fb.com
    - http verbs (METHOD): GET, POST(to send), HEAD, PUT(to update existing data), DELETE, CONNECT, OPTIONS, TRACE, PATCH, ...
    - api = application programming interface = software that allows two apps talk to each other
    - responses in http: 
      • HEADERS Content-Type: application/json 
      • BODY {text: "hi"}  
      • STATUS CODE: 200 (successful), 400+ (client error), 500+ (server error), 300+ (when a url is changed or smthn)
    - read server folder

  ◘ SAME ORIGIN POLICY ◘  
    - origin meaning: its the combination of: 
      • https:// + google.com + :443 (/maps hdi 5ati )
      • l 3fsa li tshariha m3a other users who are in google 
      • ida nta /maps w user2 /photos, ur not in the same origin
    - its a security feature darha l browser, ze3ma google cant look for your fb friends data while youre browsing in google, its not allowed
    - when u need to talk to many different servers accross many different domains make sure you use CORS, which is:
      • cross origin ressource sharing (look more for this P7L66)
      • 5olasat l 9awl kayen chi des suspecious sites yedoulek data, to secure that fl headers dir: 
        • Access-Control-Allor-Origin: theUrlThatYouTrust.com
        • par example 3ndek online store w 3lblk bli paypal 7aydirolk requests, dir ghir paypal
        • ze3ma khok t5alih yed5ol l your bank account cuz u trust him (thats called whitelisting the opposite of blacklisting)
        • require("cors") (watch a video how to use it)

----------------------------------------------------------------------

◘ EXPRESS ◘ 
  - read express folder
  - backend framework 
  - npm install express
  - to test your api requests (post), ya tdir fetch() fl console te3 browser, or use postman which is better
  - npm install nodemon --save-dev 
  - how express works:
    • when request comes in, it passes throught different middleware w t5rej as a response
    • request => middleware1 => middleware2 => middleware3 -> middleware2 -> middleware1 -> response
      • => : next()  -> : return 
      • the middlewares use app.use((req, res, next))
      • middleware3 is an endpoint and uses app.METHOD((req,res))
  ◘ MODEL-VIEW-CONTROLLER DESIGN PATTERN (FOR UNDERSTANDABLE CODE) ◘ 
    - mvc shorthand
    - USER uses CONTROLLER manipulates MODEL updates VIEW sees USER
      • ze3ma user make request (USER uses CONTROLLER)
      • controller add or remove data from database (CONTROLLER manipulates MODEL)
      • UI tetbadal (MODEL updates VIEW sees USER)
  ◘ RESTUFL APIS ◘ 
    - when u build api's, this pattern is important
    - REST = repr esentational state transfer
  ◘ TEMPLATE ENGINES ◘
    - for example: hbs (handlebars)
      • npm install hbs --save
    - role: m node dir variables that will be printed f html

----------------------------------------------------------------------

◘ NASA PROJECT ◘
  - 1st n5dmo uml, in lucid.app, w stikah mlih throught process
  - 5dem b morgan npm
  - 5dem b serve npm
  - 5dem bl map te3 js
  - 5dem b promisses, await and asynch shit
  - talked about layered architechture (to make it easier to understand and read and update our code in the future)
    • inside application layers: UI, Buisniss logic, Data access (iCloud, REST API..)
  - 5dem b DELETE method
  - testing in node:
    • test runner, test fixture, assertions, mocking
    • jest npm include all wch kayen l fo9 w 5dem biha (e9ra 3liha)
    • zad dar npm supertest
  - 5dem b require("worker_threads")
    • chghol l main thread te3 node, ydirelha fork() and create new worker thread

----------------------------------------------------------------------

◘ OPTIMISING OUR MODEL ◘
  - its when a function f js block our event loop (server), it will make the response time big (usually u want ur res time below 100-200ms)
    • ze3ma tji req1: tedi 9 seconds, tsema req2 lzm testena also 9sec then in total testean 18sec, bl fork() nenjmo fi zog n5alhom 9sec
  - tip: problem? keep diving it and solve each small part
  - the solution is: rather than taking each request and handle it in one node js server with one node process, we can instead spread our requests out betwenn mutiple node js processes (using fork()), that each respond to the request in the same way, they each contain a copy of your server code thats running side by side in parrallel (cuz processors today has mutliple cores)
  - solution method1: Cluster module (b require) (this shit uses fork())
    • if cluster.isMaster == true => rana fl pere
      • note: app.listen(3000); ndiroha f workers brk
    • cluster.fork() => u call this as much requests they coming, tsma its better to make it automaticly
      • require("os");
      • const NUM_WORKERS = os.cpus().length; 
      • basicly bah t3ref cheal m request 3ndek, BUT it depends on how strong ur cpu is
      • for (i = 0; i < NUM_WORKERS; i++)0 { cluster.fork(); }
    • process.pid();
  - load balancer: balance & distributes requests, and hes responsible in sending them to different servers, and it uses the Round-Robin algorithm bah y3ref omorato
  - solution method2: PM2 npm (uses cluster modeule) (P13)
  
